syntax = "proto3";

package v1;

option go_package = ".;proto";

//=============================================================================
// Metric Service 
//=============================================================================

// MetricConfig is all the information required to display the metrics on the
// dashboard
message MetricConfig {
  string unit = 1;
  float target = 2;
  string type = 3;
  string name = 4;
  string info = 5;
  bool hasTarget = 6;
  string smallName = 7;
}

// MetricConfigs is one or many MetricConfig
message MetricConfigs {
  repeated MetricConfig configs = 1;
}

// MetricUpdate is used to update a new metric that is received from the sensors
message MetricUpdate {
  string name = 1;
  double value = 2;
  double target = 3;
}


// MetricUpdates is one or many MetricUpdate
message MetricUpdates {
  repeated MetricUpdate updates = 1;
}

// MetricService is used to transfer information concerning metrics between the
// UI and the server.
service MetricService {
  // Get the list of all the metrics
  rpc GetAll(Empty) returns (MetricUpdates) {}

  // Subscribe is streaming the updated metrics as time goes
  rpc Subscribe(Empty) returns (stream MetricUpdates) {}

  // GetConfig gives the config of the metrics
  rpc ReadConfig(Empty) returns (MetricConfigs) {}

  // UpdateConfig allows to update the config
  rpc UpdateConfig(MetricConfigs) returns (Empty) {}
}

//=============================================================================
// Setting Service 
//=============================================================================

// Setting represents everything required to display a setting as a slider in
// the UI 
message Setting {
  enum Destination {
    NONE = 0;
    MOTOR = 1;
    MICROCONTROLLER = 2;
  }
  Destination destination = 1;
  double value = 2;
  double max = 3;
  double min = 4;
  string name = 5;
  string info = 6;
  Target target = 7;
  string smallName = 8;
}

// Target is an optional field that is used when the setting is used as a target
// for control
message Target {
  string name = 1;
  double uncertainty = 2;
}

// SettingUpdate is used to update the value of a setting by its name 
message SettingUpdate {
  string name = 1;
  double value = 2;
}

// TargetUpdate is used to update the value of the uncertainty of a target by
// its name
message TargetUpdate {
  string name = 1;
  double value = 2;
}

// Choice is used to represent a possible choice in a selector, by default
// all choices have an associated list of settings. 
message Choice {
  string name = 1;
  repeated Setting settings = 2;
}

// Selector represents all the information required to display a selector on
// the settings page
message Selector {
  string name = 1;
  Choice selectedChoice = 2;
  repeated Choice possibleChoices = 3;
}

message Selectors {
  repeated Selector selectors = 1;
}

// SelectorUpdate is used to update the choice of a selector in the backend
message SelectorUpdate {
  string name = 1;
  string choiceName = 2;
}

// ChoiceUpdate is used to update a choice and all its associated settings
message ChoiceUpdate {
  string nameSelector = 1;
  Choice newChoice = 2;
}

// Recipe represents a collection of settings and selector choices that
// dictates the behavior of the machine
message Recipe {
  string uuid = 1;
  string title = 2;
  string info = 3;
  repeated Setting settings = 4;
  repeated Selector selectors = 5; 
}

// UUIDS is a collection of UUID string 
message UUIDS {
  repeated string uuids = 1;
}

// SettingService is used to transfer information concerning settings between
// the UI and the server.
service SettingService {
  // CreateRecipe asks the server to create a new recipe in the backend 
  rpc CreateRecipe(Empty) returns (Recipe) {}
  

  // ReadRecipsUUID returns a list of the recipes UUID
  rpc ReadRecipesUUID(Empty) returns (UUIDS) {}

  // ReadRecipe returns a single recipe specified by the string argument 
  rpc ReadRecipe(StringValue) returns (Recipe) {}

  // ReadCurrentRecipe returns the recipe that is currently selected by the UI
  rpc ReadCurrentRecipe(Empty) returns (Recipe) {}
  
  // ReadSelectorList returns a list of all the Selectors in the backend 
  rpc ReadSelectorList(Empty) returns (Selectors) {}

  // UpdateSetting updates the value of a setting according to its name
  rpc UpdateSetting(SettingUpdate) returns (Empty) {}
  
  // UpdateUncertainty updates a single setting to backend
  rpc UpdateUncertainty(TargetUpdate) returns (Empty) {}
  
  // UpdateSelectedChoice updates the selected choice of a selector 
  rpc UpdateSelectedChoice(SelectorUpdate) returns (Empty) {}

  // UpdateChoice updates the settings of a choice 
  rpc UpdateChoice(ChoiceUpdate) returns (Empty) {}
  
  // UpdateCurrentRecipe tells the backend what is the active recipe
  rpc UpdateCurrentRecipe(StringValue) returns (Empty) {}

  // UpdateRecipe update a recipe
  rpc UpdateRecipe(Recipe) returns (Empty) {}

  rpc DeleteRecipe(StringValue) returns (Empty) {}
}

//=============================================================================
// Authentification Service 
//=============================================================================

message User {
  string title = 1;
  enum Roles {
    USER = 0;
    ADMIN = 1;
    CREATOR = 2;
  }
  Roles role = 2;
}

message Users {
  repeated User users = 1;
}

service AuthentificationService {
  // ReadUserList returns the list of all possible user 
  rpc ReadUserList(Empty) returns (Users) {}

  // UpdateCurrentUser update the current active user
  rpc UpdateCurrentUser(User) returns (Empty) {}

  rpc GetCurrentUser(Empty) returns (User) {}
}

//=============================================================================
// Network Service 
//=============================================================================

message WifiCredentials {
  string SSID = 1;
  string password = 2;
}

message WifiNames {
  repeated string SSIDs = 1;
}

message WifiStatus {
  bool isConnected = 1;
  string SSID = 2;
}

service NetworkService {
  // ReadStatus tells the current wifi status
  rpc ReadStatus(Empty) returns (WifiStatus) {}

  // ReadWifiList get a list of the available wi-fi networks
  rpc ReadWifiList(Empty) returns (WifiNames) {}

  // connectWifi is used to connect to a wifi
  rpc ConnectWifi(WifiCredentials) returns (Empty) {}
}


//=============================================================================
// Configuration Service 
//=============================================================================

service ConfigurationService {
  /* //getConfig returns the configuration stored in the server */
  /* rpc GetConfig(Empty) returns (Configuration) {} */
  /* rpc SetConfig(Configuration) returns (Empty) {} */
}


//=============================================================================
// Control Service 
//=============================================================================

message Action {
  string name = 1;
  string payload = 2;
}

message ControlEvent {
  string name = 1;
  string payload = 2;
}

message SendResponse {
  string error = 1;
}

service ControlService {
  rpc Send(Action) returns (SendResponse) {}
  rpc Subscribe(Empty) returns (stream ControlEvent) {} 
}


//=============================================================================
// Motor Control Service 
//=============================================================================

service MotorControlService {
  rpc Home(Empty) returns (Empty) {}
  rpc StartCycle(Empty) returns (Empty) {}
  rpc StopCycle(Empty) returns (Empty) {}
}
//=============================================================================
// Types definition 
//=============================================================================


// A generic empty message that you can re-use to avoid defining duplicated
// empty messages in your APIs. A typical example is to use it as the request
// or the response type of an API method. For instance:
//
//     service Foo {
//       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
//     }
//
// The JSON representation for `Empty` is empty JSON object `{}`.
message Empty {}


// Wrapper message for `double`.
//
// The JSON representation for `DoubleValue` is JSON number.
message DoubleValue {
  // The double value.
  double value = 1;
}

// Wrapper message for `float`.
//
// The JSON representation for `FloatValue` is JSON number.
message FloatValue {
  // The float value.
  float value = 1;
}

// Wrapper message for `int64`.
//
// The JSON representation for `Int64Value` is JSON string.
message Int64Value {
  // The int64 value.
  int64 value = 1;
}

// Wrapper message for `uint64`.
//
// The JSON representation for `UInt64Value` is JSON string.
message UInt64Value {
  // The uint64 value.
  uint64 value = 1;
}

// Wrapper message for `int32`.
//
// The JSON representation for `Int32Value` is JSON number.
message Int32Value {
  // The int32 value.
  int32 value = 1;
}

// Wrapper message for `uint32`.
//
// The JSON representation for `UInt32Value` is JSON number.
message UInt32Value {
  // The uint32 value.
  uint32 value = 1;
}

// Wrapper message for `bool`.
//
// The JSON representation for `BoolValue` is JSON `true` and `false`.
message BoolValue {
  // The bool value.
  bool value = 1;
}

// Wrapper message for `string`.
//
// The JSON representation for `StringValue` is JSON string.
message StringValue {
  // The string value.
  string value = 1;
}

// Wrapper message for `bytes`.
//
// The JSON representation for `BytesValue` is JSON string.
message BytesValue {
  // The bytes value.
  bytes value = 1;
}
